import React from 'react';
import Popup from 'react-popup';
import ReactDom from 'react-dom';
import $ from 'jquery';
import Modal from 'react-modal';

import QuestionTypes from '../Questions/QuestionTypes.jsx';
import EventHandler from '../../libaries/EventHandler.jsx';

const MultipleChoiceDisplay=QuestionTypes.MultipleChoiceQuestion.Display;
const MultipleChoiceCreator=QuestionTypes.MultipleChoiceQuestion.Creator;
const CodeQuestionDisplay=QuestionTypes.CodeQuestion.Display;
const CodeQuestionCreator=QuestionTypes.CodeQuestion.Creator;
const VideoQuestionDisplay=QuestionTypes.VideoQuestion.Display;
const VideoQuestionCreator=QuestionTypes.VideoQuestion.Creator;
const TextQuestionDisplay=QuestionTypes.TextQuestion.Display;
const TextQuestionCreator=QuestionTypes.TextQuestion.Creator;
const AudioQuestionDisplay=QuestionTypes.AudioQuestion.Display;
const AudioQuestionCreator=QuestionTypes.AudioQuestion.Creator;

import Questions from '../Questions/Questions.jsx';

class Assessment extends React.Component{
    constructor(props) {
        super(props);
        var $this=this;

        /*******************************************************************/
        /* Setup Event Handler to handle Events Between Components         */
        /*******************************************************************/
        this.myEventHandler=new EventHandler();

        /*******************************************************************/
        this.myEventHandler.on("save-question","started",function(e){
            $this.loading("Saving Question...");
        });

        /*******************************************************************/
        this.myEventHandler.on("save-question","finished",function(e){

            var questionInfo=e.data;
            $this.loading("Adding Question to Assessment...");
            $.ajax({
                url:"/rest/assessments/"+$this.getAssessmentID()+"/question/"+e.data.id,
                method:"POST",
                dataType: "json",
                contentType:'application/json',
                success:function(data){
                    var assessmentInfo=data;
                    $this.myEventHandler.trigger("question-added",{question:questionInfo,assessment:assessmentInfo});
                }
            });
        });
        $this.myEventHandler.on("question-added",function(e){
            $this.notLoading();
            $this.MoveTo("mainPage");
            $this.loadQuestions();
        });

        $this.myEventHandler.on("questions-loaded",function(e){
            var questions=e.questions.map(function(item){
                item.content=JSON.parse(item.content);
                return item;
            });
            console.log(JSON.stringify(questions));

            $this.setState({questions:questions});
        });

        this.state={"currentPage":"mainPage",questions:[]};
        this.SideBar=(<div className="col-lg-1 assessment-side-panel">
                <span className="assessment-side-panel-item btn btn-block btn-default" ><span className="glyphicon glyphicon-plus"></span></span>
                <span className="assessment-side-panel-item btn btn-block btn-primary" ><span className="glyphicon glyphicon-home"></span></span>
                <span className="assessment-side-panel-item btn btn-block btn-primary" ><span className="glyphicon glyphicon-user"></span></span>
                <span className="assessment-side-panel-item btn btn-block btn-primary" ><span className="glyphicon glyphicon-th"></span></span>
                <span className="assessment-side-panel-item btn btn-block btn-primary" ><span className="glyphicon glyphicon-check"></span></span>
            </div>);

        /*******************************************************************/
        this.questionTypes=
            {
                'code': (
                    <CodeQuestionCreator noCreateBtn={true} onChanged={(data)=>{this.setState({question:data})}} eventHandler={this.myEventHandler} question={this.props.question}>

                    </CodeQuestionCreator>
                ),
                'text': (
                    <TextQuestionCreator noCreateBtn={true} onChanged={(data)=>{this.setState({question:data})}} eventHandler={this.myEventHandler} question={this.props.question}>

                    </TextQuestionCreator>
                ),
                'audio': (
                    <AudioQuestionCreator noCreateBtn={true} onChanged={(data)=>{this.setState({question:data})}} eventHandler={this.myEventHandler} question={this.props.question}>

                    </AudioQuestionCreator>
                ),
                'video': (
                    <VideoQuestionCreator noCreateBtn={true} onChanged={(data)=>{this.setState({question:data})}} eventHandler={this.myEventHandler} question={this.props.question}>

                    </VideoQuestionCreator>
                ),
                'multiple-choice': (
                    <MultipleChoiceCreator noCreateBtn={true} onChanged={(data)=>{this.setState({question:data})}} eventHandler={this.myEventHandler} question={this.props.question}>

                    </MultipleChoiceCreator>
                )
            };


        this.questionSelection=function(selection){
            return (
                <div className={(typeof selection!="undefined"?"selection-exists":"")+" question-type-selection"}>
                    <div onClick={()=>$this.chooseQuestionType('multiple-choice')}  className={"btn question-type-selection-option "+(selection=='multiple-choice'?'selected':'')} >
                        <div className="question-type-selection-option-icon"><span className="glyphicon glyphicon-star-empty"></span></div>
                        <div className="question-type-selection-option-text">Multiple Choice</div>
                    </div>
                    <div onClick={()=>$this.chooseQuestionType('text')} className={"btn question-type-selection-option "+(selection=='text'?'selected':'')}>
                        <div className="question-type-selection-option-icon"><span className="glyphicon glyphicon-font"></span> </div>
                        <div className="question-type-selection-option-text">Text response</div>
                    </div>
                    <div onClick={()=>$this.chooseQuestionType('video')} className={"btn question-type-selection-option "+(selection=='video'?'selected':'')}>
                        <div className="question-type-selection-option-icon"><span className="glyphicon glyphicon-facetime-video"></span> </div>
                        <div className="question-type-selection-option-text">Video response</div>
                    </div>
                    <div onClick={()=>$this.chooseQuestionType('audio')} className={"btn question-type-selection-option "+(selection=='audio'?'selected':'')}>
                        <div className="question-type-selection-option-icon"><span className="glyphicon glyphicon-volume-up"></span> </div>
                        <div className="question-type-selection-option-text">Audio response</div>
                    </div>
                    <div onClick={()=>$this.chooseQuestionType('code')} className={"btn question-type-selection-option "+(selection=='code'?'selected':'')}>
                        <div className="question-type-selection-option-icon"><span className="glyphicon glyphicon-console"></span> </div>
                        <div className="question-type-selection-option-text">Code response</div>
                    </div>
                </div>
            );
        };


        this.stepInstructions= {
            "mainPage":
                {
                    headingTitle: "Populate your Assessment",
                    previous:{
                        enabled:true,
                        html:"Cancel",
                        clicked:function($this){
                            $this.MoveTo("targetGroups");
                        }
                    },
                    next:{
                        enabled:function($this){
                            return $this.state.questions.length>0;
                        },
                        html:function($this){
                            if($this.state.questions.length>0){
                                return "Save";
                            }
                            return "Next"
                        },
                        clicked:function($this){
                            $this.MoveTo("saveAssessment")
                        }
                    },
                    render: function () {



                        return (
                            <div className="build-your-assessment-container">
                                <div className="top-main-header">
                                    <div className="assessment-id">ASSESS{$this.getAssessmentID()}</div>
                                    <div className="heading-title">New Assessment</div>
                                    <div className="heading-user-info">
                                        <i className="fa fa-user-circle-o"/>
                                    </div>
                                </div>
                                <div className="top-header-container">
                                    <div className="top-header-title">
                                        Build Your Assessment
                                    </div>
                                    <div className="top-header-tools">
                                        <div className="top-header-time-allowed-container">
                                            <i className="fa fa-clock-o"/>
                                            Time allowed
                                            {/* Rashan: Put your time component here(Replace if needed) */}
                                        </div>
                                        <div className="top-header-expiration-date-container">
                                            <i className="fa fa-calendar"/>
                                            Set Expiration
                                            {/* Joshua: Put your expiration date component here */}
                                        </div>
                                        <div className="top-header-preview-container">
                                            <div className="preview-button"><i className="fa fa-eye"></i> Preview</div>
                                        </div>
                                    </div>
                                </div>
                                <div className="assessment-questions-container">
                                    <div className="assessment-questions-header-container">
                                        <div className="assessment-questions-header-add-container">
                                            <span onClick={() => {
/* Move to Choose Question */                   $this.MoveTo("chooseQuestion")
                                            }} className="btn assessment-questions-container-add-btn"><span className="glyphicon glyphicon-plus"/> Add</span>
                                        </div>
                                        <div className="assessment-questions-header-title">{$this.state.questions.length} Questions</div>

                                    </div>
                                    <div className="assessment-questions-body">
                                        <Questions questions={$this.state.questions}/>
                                    </div>
                                </div>

                            </div>);
                    }
            },
            "chooseQuestion": {
                headingTitle: "Pick a Question",
                previous:{
                    enabled:true,
                    html:"Back",
                    clicked:function($this){
                        $this.MoveTo("mainPage");
                    }
                },
                next:{
                    enabled:function($this){
                        return typeof $this.state.selection!="undefined";
                    },
                    html:function($this){
                        return "Next"
                    },
                    clicked:function($this){
                        $this.myEventHandler.trigger("save-question");
                    }
                },
                render: function () {
                    return (
                        <div className="add-a-question-main-container">
                            <div className="top-main-header">
                                <div className="assessment-id">ASSESS{$this.getAssessmentID()}</div>
                                <div className="heading-title">Add a Question</div>
                                <div className="heading-user-info">
                                    <i className="fa fa-user-circle-o"/>
                                </div>
                            </div>
                            <div className="add-a-question-types-selection">
                            {$this.questionSelection($this.state.selection)}
                            </div>
                            <div className="add-a-question-type-selected">
                                {typeof $this.state.selection!="undefined"?
                                 $this.stepInstructions["setupQuestion"].render():
                                    (<div className="no-type-selected-message">Select Question Type</div> )
                                }
                            </div>



                        </div>);
                }
            },
            "setupQuestion": {
                headingTitle: "Populate Question",
                previous:{
                    enabled:true,
                    html:"Back",
                    clicked:function($this){
                        $this.MoveTo("chooseQuestion");
                    }
                },
                next:{
                    enabled:function($this){
                        return typeof $this.state.selection!="undefined";
                    },
                    html:function($this){
                        return "Next"
                    },
                    clicked:function($this){
                        $this.myEventHandler.trigger("save-question");
                    }
                },
                render: function () {
                    console.log(JSON.stringify($this.state.question?$this.state.question:"NA"));

                    return (
                        <div>
                            {$this.questionTypes[$this.state.selection]}
                            <div className="col-lg-12 bottomBar">
                            <span className="assessment-steps-highlight">
                                <span className="">Step 1</span>
                                <span className="active">Step 2</span>
                                <span className="">Step 3</span>
                            </span>
                            </div>
                        </div>
                    )

                }
            },
            "saveAssessment": {
                headingTitle: "More?",
                render: function () {
                    return (
                        <div>
                            <div onClick={() => {
                                $this.setState({step: 1})
                            }} className="btn">More?
                            </div>
                        </div>
                    )

                }
            },
            "reviewAssessments": {
                headingTitle: "Review Assessment",
                render: function () {
                    return (
                        <div>
                            <Questions />

                        </div>
                    )
                }
            },
            "previewAssessment": {
                headingTitle: "Preview Assessment",
                render: function () {
                    return (
                        <div>
                            <h2>Sajiva(Your Stuff Goes Here)</h2>
                        </div>
                    )
                }
            },
            "targetGroups": {
                urlRoute: "/app/target-groups"
            },
            "errorPage": {
                headingTitle: "Unkown Page",
                render: function () {
                    return (
                        <div>
                            <h2 className="text-danger"><b>Error</b>{this.state.error}</h2>
                        </div>
                    )
                }
            }
        };

    }
    componentDidMount() {
        this.loadQuestions();
    }
    loadQuestions(){
        var $this=this;
        $this.loading("Loading Questions...");
        $.get("/rest/assessments/"+$this.getAssessmentID()+"/",{"_":$.now()},function(data)
        {
            var assessmentInfo=data;
            $this.notLoading();
            $this.myEventHandler.trigger("questions-loaded",{questions:data.questionSet});

        });
    }
    getCurrentPageProperties(){
        return this.stepInstructions[this.state.currentPage];
    }
    MoveTo(pageName){

        /*******************************************************************/
        if(typeof this.stepInstructions[this.state.currentPage] == "undefined"){
            this.setState({
                error:"Unkown Page"+pageName,
                currentPage:"errorPage",
            });
            return;
        }

        /*******************************************************************/
        this.setState({"currentPage":pageName});

    }
    getAssessmentID(){
        return this.props.params.assessmentID;
    }
    chooseQuestionType(selectionChoicen){
        this.setState({selection:selectionChoicen});
    }
    loading(message){
        this.setState({loading:true,loadingMessage:message});
    }
    notLoading(){
        this.setState({loading:false});
    }
    render() {

        /*******************************************************************/
        var $this=this;

        /*******************************************************************/
        /* Check for Rerouting                                             */
        /*******************************************************************/
        if(typeof this.getCurrentPageProperties()["urlRoute"] != "undefined"){
            document.location=this.getCurrentPageProperties()["urlRoute"];
            return (<div></div>)
        }




        /*******************************************************************/
        /* Back Info                                                       */
        /*******************************************************************/
        var backInfo={};
        if(typeof this.getCurrentPageProperties().previous =="undefined"){
            backInfo.enabled=false;
            backInfo.html="Back";
            backInfo.class="back-btn disabled";
            backInfo.click=function(){};
        }
        else
        {
            /***************************************************************/
            if(typeof this.getCurrentPageProperties().previous.enabled =="function"){
                backInfo.enabled=this.getCurrentPageProperties().previous.enabled(this);
            }
            else{
                backInfo.enabled=this.getCurrentPageProperties().previous.enabled;
            }

            /***************************************************************/
            if(typeof this.getCurrentPageProperties().previous.html =="function"){
                backInfo.html=this.getCurrentPageProperties().previous.html(this);
            }
            else if(typeof this.getCurrentPageProperties().previous.html =="string"){
                backInfo.html=this.getCurrentPageProperties().previous.html;
            }

            /***************************************************************/
            backInfo.clicked=this.getCurrentPageProperties().previous.clicked?this.getCurrentPageProperties().previous.clicked:function(){};

            /***************************************************************/
            backInfo.class=backInfo.enabled?"back-btn":"back-btn disabled";


        }

        /*******************************************************************/
        /* Next Info                                                       */
        /*******************************************************************/
        var nextInfo={};
        if(typeof this.getCurrentPageProperties().next =="undefined"){
            nextInfo.enabled=false;
            nextInfo.html="Back";
            nextInfo.class="back-btn disabled";
            nextInfo.click=function(){};
        }
        else
        {
            /***************************************************************/
            if(typeof this.getCurrentPageProperties().next.enabled =="function"){
                nextInfo.enabled=this.getCurrentPageProperties().next.enabled(this);
            }
            else{
                nextInfo.enabled=this.getCurrentPageProperties().next.enabled;
            }

            /***************************************************************/
            if(typeof this.getCurrentPageProperties().next.html =="function"){
                nextInfo.html=this.getCurrentPageProperties().next.html(this);
            }
            else if(typeof this.getCurrentPageProperties().next.html =="string"){
                nextInfo.html=this.getCurrentPageProperties().next.html;
            }

            /***************************************************************/
            nextInfo.clicked=this.getCurrentPageProperties().next.clicked?this.getCurrentPageProperties().next.clicked:function(){};

            /***************************************************************/
            nextInfo.class=nextInfo.enabled?"next-btn":"next-btn disabled";


        }

      //Add Later
      //this.props.OnRequestApp().setHeadingTitle(this.stepInstructions[this.state.step].headingTitle);

        /*******************************************************************/
        return (
            <div className="new-assessment-main-container">
                <div className="new-assessment-container">{this.getCurrentPageProperties().render()}</div>
                <div className="new-assessment-footer">
                    <div className="new-assessment-previous-next-buttons">
                        <div onClick={()=>{backInfo.clicked(this)}} className={backInfo.class}>
                            <i className="fa fa-arrow-circle-o-left" />
                            {backInfo.html}
                        </div>
                        <div onClick={()=>{nextInfo.clicked(this)}} className={nextInfo.class}>
                            {nextInfo.html}
                            <i className="fa fa-arrow-circle-o-right" />
                        </div>
                    </div>
                </div>
                <div className={(this.state.loading?"":"disabled")+" loading-splash-screen"}>
                    <div className="loading-spinner-container">
                        <div className="loading-spinner"></div>
                        <div className="loading-message">{this.state.loadingMessage}</div>
                    </div>
                </div>
            </div>
        )
    }


}







export default Assessment;
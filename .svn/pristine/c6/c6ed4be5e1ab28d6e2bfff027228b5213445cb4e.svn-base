package hello.security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.security.SecurityProperties;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.annotation.Order;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.savedrequest.NullRequestCache;

//@Configuration
//@Order(SecurityProperties.ACCESS_OVERRIDE_ORDER)
//@EnableGlobalMethodSecurity(securedEnabled = true)
public class WebSecurityConfig extends WebSecurityConfigurerAdapter{

    //TODO NEED TO FIX
//    @Override
//    protected void configure(HttpSecurity httpSecurity) throws Exception{
//        httpSecurity
//                .authorizeRequests()
//                .antMatchers("/login/").permitAll()
//                .antMatchers("/api/session").permitAll()
//                .antMatchers(HttpMethod.GET, "/rest/**").authenticated()
//                .antMatchers(HttpMethod.POST, "/rest/**").authenticated()
//                .antMatchers(HttpMethod.PATCH, "/rest/**").authenticated()
//                .antMatchers(HttpMethod.DELETE, "/rest/**").authenticated()
//                .and()
//                .requestCache()
//                .requestCache(new NullRequestCache())
//                .and()
//                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.NEVER)
//                .and().csrf().disable();
//    }

//    @Autowired
//    public void configureGlobal(AuthenticationManagerBuilder authManagerBuilder) throws Exception{
//        authManagerBuilder.inMemoryAuthentication()
//                .withUser("user").password("password").roles("USER");
//    }
}
